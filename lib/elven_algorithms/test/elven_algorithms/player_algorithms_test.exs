defmodule ElvenAlgorithms.PlayerAlgorithmsTest do
  use ExUnit.Case

  alias ElvenAlgorithms.PlayerAlgorithms

  ## Tests

  describe "hp_max/2 for" do
    test "adventurer" do
      Enum.each(adventurer_hp_max(), fn {level, hp} ->
        assert PlayerAlgorithms.hp_max(:adventurer, level) == hp
      end)
    end

    test "swordman" do
      Enum.each(swordman_hp_max(), fn {level, hp} ->
        assert PlayerAlgorithms.hp_max(:swordman, level) == hp
      end)
    end

    test "archer" do
      Enum.each(archer_hp_max(), fn {level, hp} ->
        assert PlayerAlgorithms.hp_max(:archer, level) == hp
      end)
    end

    test "magician" do
      Enum.each(magician_hp_max(), fn {level, hp} ->
        assert PlayerAlgorithms.hp_max(:magician, level) == hp
      end)
    end

    test "martial_artist" do
      Enum.each(martial_artist_hp_max(), fn {level, hp} ->
        assert PlayerAlgorithms.hp_max(:martial_artist, level) == hp
      end)
    end
  end

  describe "mp_max/2 for" do
    test "adventurer" do
      Enum.each(adventurer_mp_max(), fn {level, mp} ->
        assert PlayerAlgorithms.mp_max(:adventurer, level) == mp
      end)
    end

    test "swordman" do
      Enum.each(swordman_mp_max(), fn {level, mp} ->
        assert PlayerAlgorithms.mp_max(:swordman, level) == mp
      end)
    end

    test "archer" do
      Enum.each(archer_mp_max(), fn {level, mp} ->
        assert PlayerAlgorithms.mp_max(:archer, level) == mp
      end)
    end

    test "magician" do
      Enum.each(magician_mp_max(), fn {level, mp} ->
        assert PlayerAlgorithms.mp_max(:magician, level) == mp
      end)
    end

    test "martial_artist" do
      Enum.each(martial_artist_mp_max(), fn {level, mp} ->
        assert PlayerAlgorithms.mp_max(:martial_artist, level) == mp
      end)
    end
  end

  describe "close_defense/2 for" do
    test "adventurer" do
      Enum.each(adventurer_close_defense(), fn {level, defense} ->
        assert PlayerAlgorithms.close_defense(:adventurer, level) == defense
      end)
    end

    test "swordman" do
      Enum.each(swordman_close_defense(), fn {level, defense} ->
        assert PlayerAlgorithms.close_defense(:swordman, level) == defense
      end)
    end

    test "archer" do
      Enum.each(archer_close_defense(), fn {level, defense} ->
        assert PlayerAlgorithms.close_defense(:archer, level) == defense
      end)
    end

    test "magician" do
      Enum.each(magician_close_defense(), fn {level, defense} ->
        assert PlayerAlgorithms.close_defense(:magician, level) == defense
      end)
    end

    test "martial_artist" do
      Enum.each(martial_artist_close_defense(), fn {level, defense} ->
        assert PlayerAlgorithms.close_defense(:martial_artist, level) == defense
      end)
    end
  end

  ## Helpers

  def adventurer_hp_max() do
    [
      {1, 221},
      {2, 238},
      {3, 256},
      {4, 275},
      {5, 295},
      {6, 316},
      {7, 338},
      {8, 361},
      {9, 385},
      {10, 410},
      {11, 436},
      {12, 463},
      {13, 491},
      {14, 520},
      {15, 550},
      {16, 581},
      {17, 613},
      {18, 646},
      {19, 680},
      {20, 715},
      {21, 751},
      {22, 788},
      {23, 826},
      {24, 865},
      {25, 905},
      {26, 946},
      {27, 988},
      {28, 1031},
      {29, 1075},
      {30, 1120},
      {31, 1166},
      {32, 1213},
      {33, 1261},
      {34, 1310},
      {35, 1360},
      {36, 1411},
      {37, 1463},
      {38, 1516},
      {39, 1570},
      {40, 1625},
      {41, 1681},
      {42, 1738},
      {43, 1796},
      {44, 1855},
      {45, 1915},
      {46, 1976},
      {47, 2038},
      {48, 2101},
      {49, 2165},
      {50, 2230},
      {51, 2296},
      {52, 2363},
      {53, 2431},
      {54, 2500},
      {55, 2570},
      {56, 2641},
      {57, 2713},
      {58, 2786},
      {59, 2860},
      {60, 2935},
      {61, 3011},
      {62, 3088},
      {63, 3166},
      {64, 3245},
      {65, 3325},
      {66, 3406},
      {67, 3488},
      {68, 3571},
      {69, 3655},
      {70, 3740},
      {71, 3826},
      {72, 3913},
      {73, 4001},
      {74, 4090},
      {75, 4180},
      {76, 4271},
      {77, 4363},
      {78, 4456},
      {79, 4550},
      {80, 4645},
      {81, 4741},
      {82, 4838},
      {83, 4936},
      {84, 5035},
      {85, 5135},
      {86, 5236},
      {87, 5338},
      {88, 5441},
      {89, 5545},
      {90, 5650},
      {91, 5756},
      {92, 5863},
      {93, 5971},
      {94, 6080},
      {95, 6190},
      {96, 6301},
      {97, 6413},
      {98, 6526},
      {99, 6640}
    ]
  end

  def swordman_hp_max() do
    [
      {1, 221},
      {2, 238},
      {3, 275},
      {4, 316},
      {5, 361},
      {6, 410},
      {7, 436},
      {8, 491},
      {9, 550},
      {10, 613},
      {11, 680},
      {12, 715},
      {13, 788},
      {14, 865},
      {15, 946},
      {16, 1031},
      {17, 1075},
      {18, 1166},
      {19, 1261},
      {20, 1360},
      {21, 1463},
      {22, 1516},
      {23, 1625},
      {24, 1738},
      {25, 1855},
      {26, 1976},
      {27, 2038},
      {28, 2165},
      {29, 2296},
      {30, 2431},
      {31, 2570},
      {32, 2641},
      {33, 2786},
      {34, 2935},
      {35, 3088},
      {36, 3245},
      {37, 3325},
      {38, 3488},
      {39, 3655},
      {40, 3826},
      {41, 4001},
      {42, 4090},
      {43, 4271},
      {44, 4456},
      {45, 4645},
      {46, 4838},
      {47, 4936},
      {48, 5135},
      {49, 5338},
      {50, 5545},
      {51, 5756},
      {52, 5863},
      {53, 6080},
      {54, 6301},
      {55, 6526},
      {56, 6755},
      {57, 6871},
      {58, 7106},
      {59, 7345},
      {60, 7588},
      {61, 7835},
      {62, 7960},
      {63, 8213},
      {64, 8470},
      {65, 8731},
      {66, 8996},
      {67, 9130},
      {68, 9401},
      {69, 9676},
      {70, 9955},
      {71, 10238},
      {72, 10381},
      {73, 10670},
      {74, 10963},
      {75, 11260},
      {76, 11561},
      {77, 11713},
      {78, 12020},
      {79, 12331},
      {80, 12646},
      {81, 12965},
      {82, 13126},
      {83, 13451},
      {84, 13780},
      {85, 14113},
      {86, 14450},
      {87, 14620},
      {88, 14963},
      {89, 15310},
      {90, 15661},
      {91, 16016},
      {92, 16195},
      {93, 16556},
      {94, 16921},
      {95, 17290},
      {96, 17663},
      {97, 17851},
      {98, 18230},
      {99, 18613}
    ]
  end

  def archer_hp_max() do
    [
      {1, 221},
      {2, 238},
      {3, 256},
      {4, 275},
      {5, 316},
      {6, 338},
      {7, 361},
      {8, 410},
      {9, 436},
      {10, 463},
      {11, 520},
      {12, 550},
      {13, 581},
      {14, 613},
      {15, 680},
      {16, 715},
      {17, 751},
      {18, 826},
      {19, 865},
      {20, 905},
      {21, 988},
      {22, 1031},
      {23, 1075},
      {24, 1120},
      {25, 1213},
      {26, 1261},
      {27, 1310},
      {28, 1411},
      {29, 1463},
      {30, 1516},
      {31, 1625},
      {32, 1681},
      {33, 1738},
      {34, 1796},
      {35, 1915},
      {36, 1976},
      {37, 2038},
      {38, 2165},
      {39, 2230},
      {40, 2296},
      {41, 2431},
      {42, 2500},
      {43, 2570},
      {44, 2641},
      {45, 2786},
      {46, 2860},
      {47, 2935},
      {48, 3088},
      {49, 3166},
      {50, 3245},
      {51, 3406},
      {52, 3488},
      {53, 3571},
      {54, 3655},
      {55, 3826},
      {56, 3913},
      {57, 4001},
      {58, 4180},
      {59, 4271},
      {60, 4363},
      {61, 4550},
      {62, 4645},
      {63, 4741},
      {64, 4838},
      {65, 5035},
      {66, 5135},
      {67, 5236},
      {68, 5441},
      {69, 5545},
      {70, 5650},
      {71, 5863},
      {72, 5971},
      {73, 6080},
      {74, 6190},
      {75, 6413},
      {76, 6526},
      {77, 6640},
      {78, 6871},
      {79, 6988},
      {80, 7106},
      {81, 7345},
      {82, 7466},
      {83, 7588},
      {84, 7711},
      {85, 7960},
      {86, 8086},
      {87, 8213},
      {88, 8470},
      {89, 8600},
      {90, 8731},
      {91, 8996},
      {92, 9130},
      {93, 9265},
      {94, 9401},
      {95, 9676},
      {96, 9815},
      {97, 9955},
      {98, 10238},
      {99, 10381}
    ]
  end

  def magician_hp_max() do
    [
      {1, 221},
      {2, 238},
      {3, 256},
      {4, 275},
      {5, 295},
      {6, 316},
      {7, 338},
      {8, 361},
      {9, 385},
      {10, 410},
      {11, 436},
      {12, 463},
      {13, 491},
      {14, 520},
      {15, 550},
      {16, 581},
      {17, 613},
      {18, 646},
      {19, 680},
      {20, 715},
      {21, 751},
      {22, 788},
      {23, 826},
      {24, 865},
      {25, 905},
      {26, 946},
      {27, 988},
      {28, 1031},
      {29, 1075},
      {30, 1120},
      {31, 1166},
      {32, 1213},
      {33, 1261},
      {34, 1310},
      {35, 1360},
      {36, 1411},
      {37, 1463},
      {38, 1516},
      {39, 1570},
      {40, 1625},
      {41, 1681},
      {42, 1738},
      {43, 1796},
      {44, 1855},
      {45, 1915},
      {46, 1976},
      {47, 2038},
      {48, 2101},
      {49, 2165},
      {50, 2230},
      {51, 2296},
      {52, 2363},
      {53, 2431},
      {54, 2500},
      {55, 2570},
      {56, 2641},
      {57, 2713},
      {58, 2786},
      {59, 2860},
      {60, 2935},
      {61, 3011},
      {62, 3088},
      {63, 3166},
      {64, 3245},
      {65, 3325},
      {66, 3406},
      {67, 3488},
      {68, 3571},
      {69, 3655},
      {70, 3740},
      {71, 3826},
      {72, 3913},
      {73, 4001},
      {74, 4090},
      {75, 4180},
      {76, 4271},
      {77, 4363},
      {78, 4456},
      {79, 4550},
      {80, 4645},
      {81, 4741},
      {82, 4838},
      {83, 4936},
      {84, 5035},
      {85, 5135},
      {86, 5236},
      {87, 5338},
      {88, 5441},
      {89, 5545},
      {90, 5650},
      {91, 5756},
      {92, 5863},
      {93, 5971},
      {94, 6080},
      {95, 6190},
      {96, 6301},
      {97, 6413},
      {98, 6526},
      {99, 6640}
    ]
  end

  def martial_artist_hp_max() do
    [
      {1, 221},
      {2, 238},
      {3, 275},
      {4, 295},
      {5, 338},
      {6, 361},
      {7, 410},
      {8, 436},
      {9, 491},
      {10, 520},
      {11, 581},
      {12, 613},
      {13, 680},
      {14, 715},
      {15, 788},
      {16, 826},
      {17, 905},
      {18, 946},
      {19, 1031},
      {20, 1075},
      {21, 1166},
      {22, 1213},
      {23, 1310},
      {24, 1360},
      {25, 1463},
      {26, 1516},
      {27, 1625},
      {28, 1681},
      {29, 1796},
      {30, 1855},
      {31, 1976},
      {32, 2038},
      {33, 2165},
      {34, 2230},
      {35, 2363},
      {36, 2431},
      {37, 2570},
      {38, 2641},
      {39, 2786},
      {40, 2860},
      {41, 3011},
      {42, 3088},
      {43, 3245},
      {44, 3325},
      {45, 3488},
      {46, 3571},
      {47, 3740},
      {48, 3826},
      {49, 4001},
      {50, 4090},
      {51, 4271},
      {52, 4363},
      {53, 4550},
      {54, 4645},
      {55, 4838},
      {56, 4936},
      {57, 5135},
      {58, 5236},
      {59, 5441},
      {60, 5545},
      {61, 5756},
      {62, 5863},
      {63, 6080},
      {64, 6190},
      {65, 6413},
      {66, 6526},
      {67, 6755},
      {68, 6871},
      {69, 7106},
      {70, 7225},
      {71, 7466},
      {72, 7588},
      {73, 7835},
      {74, 7960},
      {75, 8213},
      {76, 8341},
      {77, 8600},
      {78, 8731},
      {79, 8996},
      {80, 9130},
      {81, 9401},
      {82, 9538},
      {83, 9815},
      {84, 9955},
      {85, 10238},
      {86, 10381},
      {87, 10670},
      {88, 10816},
      {89, 11111},
      {90, 11260},
      {91, 11561},
      {92, 11713},
      {93, 12020},
      {94, 12175},
      {95, 12488},
      {96, 12646},
      {97, 12965},
      {98, 13126},
      {99, 13451}
    ]
  end

  def adventurer_mp_max() do
    [
      {1, 60},
      {2, 69},
      {3, 78},
      {4, 87},
      {5, 97},
      {6, 108},
      {7, 119},
      {8, 130},
      {9, 142},
      {10, 155},
      {11, 168},
      {12, 181},
      {13, 195},
      {14, 210},
      {15, 225},
      {16, 240},
      {17, 256},
      {18, 273},
      {19, 290},
      {20, 307},
      {21, 325},
      {22, 344},
      {23, 363},
      {24, 382},
      {25, 402},
      {26, 423},
      {27, 444},
      {28, 465},
      {29, 487},
      {30, 510},
      {31, 533},
      {32, 556},
      {33, 580},
      {34, 605},
      {35, 630},
      {36, 655},
      {37, 681},
      {38, 708},
      {39, 735},
      {40, 762},
      {41, 790},
      {42, 819},
      {43, 848},
      {44, 877},
      {45, 907},
      {46, 938},
      {47, 969},
      {48, 1000},
      {49, 1032},
      {50, 1065},
      {51, 1098},
      {52, 1131},
      {53, 1165},
      {54, 1200},
      {55, 1235},
      {56, 1270},
      {57, 1306},
      {58, 1343},
      {59, 1380},
      {60, 1417},
      {61, 1455},
      {62, 1494},
      {63, 1533},
      {64, 1572},
      {65, 1612},
      {66, 1653},
      {67, 1694},
      {68, 1735},
      {69, 1777},
      {70, 1820},
      {71, 1863},
      {72, 1906},
      {73, 1950},
      {74, 1995},
      {75, 2040},
      {76, 2085},
      {77, 2131},
      {78, 2178},
      {79, 2225},
      {80, 2272},
      {81, 2320},
      {82, 2369},
      {83, 2418},
      {84, 2467},
      {85, 2517},
      {86, 2568},
      {87, 2619},
      {88, 2670},
      {89, 2722},
      {90, 2775},
      {91, 2828},
      {92, 2881},
      {93, 2935},
      {94, 2990},
      {95, 3045},
      {96, 3100},
      {97, 3156},
      {98, 3213},
      {99, 3270}
    ]
  end

  def swordman_mp_max() do
    [
      {1, 60},
      {2, 69},
      {3, 78},
      {4, 87},
      {5, 97},
      {6, 108},
      {7, 119},
      {8, 130},
      {9, 142},
      {10, 155},
      {11, 168},
      {12, 181},
      {13, 195},
      {14, 210},
      {15, 225},
      {16, 240},
      {17, 256},
      {18, 273},
      {19, 290},
      {20, 307},
      {21, 325},
      {22, 344},
      {23, 363},
      {24, 382},
      {25, 402},
      {26, 423},
      {27, 444},
      {28, 465},
      {29, 487},
      {30, 510},
      {31, 533},
      {32, 556},
      {33, 580},
      {34, 605},
      {35, 630},
      {36, 655},
      {37, 681},
      {38, 708},
      {39, 735},
      {40, 762},
      {41, 790},
      {42, 819},
      {43, 848},
      {44, 877},
      {45, 907},
      {46, 938},
      {47, 969},
      {48, 1000},
      {49, 1032},
      {50, 1065},
      {51, 1098},
      {52, 1131},
      {53, 1165},
      {54, 1200},
      {55, 1235},
      {56, 1270},
      {57, 1306},
      {58, 1343},
      {59, 1380},
      {60, 1417},
      {61, 1455},
      {62, 1494},
      {63, 1533},
      {64, 1572},
      {65, 1612},
      {66, 1653},
      {67, 1694},
      {68, 1735},
      {69, 1777},
      {70, 1820},
      {71, 1863},
      {72, 1906},
      {73, 1950},
      {74, 1995},
      {75, 2040},
      {76, 2085},
      {77, 2131},
      {78, 2178},
      {79, 2225},
      {80, 2272},
      {81, 2320},
      {82, 2369},
      {83, 2418},
      {84, 2467},
      {85, 2517},
      {86, 2568},
      {87, 2619},
      {88, 2670},
      {89, 2722},
      {90, 2775},
      {91, 2828},
      {92, 2881},
      {93, 2935},
      {94, 2990},
      {95, 3045},
      {96, 3100},
      {97, 3156},
      {98, 3213},
      {99, 3270}
    ]
  end

  def archer_mp_max() do
    [
      {1, 60},
      {2, 69},
      {3, 78},
      {4, 87},
      {5, 97},
      {6, 108},
      {7, 119},
      {8, 130},
      {9, 142},
      {10, 155},
      {11, 181},
      {12, 195},
      {13, 210},
      {14, 225},
      {15, 240},
      {16, 256},
      {17, 273},
      {18, 290},
      {19, 307},
      {20, 325},
      {21, 363},
      {22, 382},
      {23, 402},
      {24, 423},
      {25, 444},
      {26, 465},
      {27, 487},
      {28, 510},
      {29, 533},
      {30, 556},
      {31, 605},
      {32, 630},
      {33, 655},
      {34, 681},
      {35, 708},
      {36, 735},
      {37, 762},
      {38, 790},
      {39, 819},
      {40, 848},
      {41, 907},
      {42, 938},
      {43, 969},
      {44, 1000},
      {45, 1032},
      {46, 1065},
      {47, 1098},
      {48, 1131},
      {49, 1165},
      {50, 1200},
      {51, 1270},
      {52, 1306},
      {53, 1343},
      {54, 1380},
      {55, 1417},
      {56, 1455},
      {57, 1494},
      {58, 1533},
      {59, 1572},
      {60, 1612},
      {61, 1694},
      {62, 1735},
      {63, 1777},
      {64, 1820},
      {65, 1863},
      {66, 1906},
      {67, 1950},
      {68, 1995},
      {69, 2040},
      {70, 2085},
      {71, 2178},
      {72, 2225},
      {73, 2272},
      {74, 2320},
      {75, 2369},
      {76, 2418},
      {77, 2467},
      {78, 2517},
      {79, 2568},
      {80, 2619},
      {81, 2722},
      {82, 2775},
      {83, 2828},
      {84, 2881},
      {85, 2935},
      {86, 2990},
      {87, 3045},
      {88, 3100},
      {89, 3156},
      {90, 3213},
      {91, 3327},
      {92, 3385},
      {93, 3444},
      {94, 3503},
      {95, 3562},
      {96, 3622},
      {97, 3683},
      {98, 3744},
      {99, 3805}
    ]
  end

  def magician_mp_max() do
    [
      {1, 60},
      {2, 69},
      {3, 87},
      {4, 108},
      {5, 130},
      {6, 155},
      {7, 168},
      {8, 195},
      {9, 225},
      {10, 256},
      {11, 290},
      {12, 307},
      {13, 344},
      {14, 382},
      {15, 423},
      {16, 465},
      {17, 487},
      {18, 533},
      {19, 580},
      {20, 630},
      {21, 681},
      {22, 708},
      {23, 762},
      {24, 819},
      {25, 877},
      {26, 938},
      {27, 969},
      {28, 1032},
      {29, 1098},
      {30, 1165},
      {31, 1235},
      {32, 1270},
      {33, 1343},
      {34, 1417},
      {35, 1494},
      {36, 1572},
      {37, 1612},
      {38, 1694},
      {39, 1777},
      {40, 1863},
      {41, 1950},
      {42, 1995},
      {43, 2085},
      {44, 2178},
      {45, 2272},
      {46, 2369},
      {47, 2418},
      {48, 2517},
      {49, 2619},
      {50, 2722},
      {51, 2828},
      {52, 2881},
      {53, 2990},
      {54, 3100},
      {55, 3213},
      {56, 3327},
      {57, 3385},
      {58, 3503},
      {59, 3622},
      {60, 3744},
      {61, 3867},
      {62, 3930},
      {63, 4056},
      {64, 4185},
      {65, 4315},
      {66, 4448},
      {67, 4515},
      {68, 4650},
      {69, 4788},
      {70, 4927},
      {71, 5069},
      {72, 5140},
      {73, 5285},
      {74, 5431},
      {75, 5580},
      {76, 5730},
      {77, 5806},
      {78, 5960},
      {79, 6115},
      {80, 6273},
      {81, 6432},
      {82, 6513},
      {83, 6675},
      {84, 6840},
      {85, 7006},
      {86, 7175},
      {87, 7260},
      {88, 7431},
      {89, 7605},
      {90, 7780},
      {91, 7958},
      {92, 8047},
      {93, 8228},
      {94, 8410},
      {95, 8595},
      {96, 8781},
      {97, 8875},
      {98, 9065},
      {99, 9256}
    ]
  end

  def martial_artist_mp_max() do
    [
      {1, 60},
      {2, 69},
      {3, 78},
      {4, 87},
      {5, 97},
      {6, 119},
      {7, 130},
      {8, 142},
      {9, 155},
      {10, 168},
      {11, 195},
      {12, 210},
      {13, 225},
      {14, 240},
      {15, 256},
      {16, 290},
      {17, 307},
      {18, 325},
      {19, 344},
      {20, 363},
      {21, 402},
      {22, 423},
      {23, 444},
      {24, 465},
      {25, 487},
      {26, 533},
      {27, 556},
      {28, 580},
      {29, 605},
      {30, 630},
      {31, 681},
      {32, 708},
      {33, 735},
      {34, 762},
      {35, 790},
      {36, 848},
      {37, 877},
      {38, 907},
      {39, 938},
      {40, 969},
      {41, 1032},
      {42, 1065},
      {43, 1098},
      {44, 1131},
      {45, 1165},
      {46, 1235},
      {47, 1270},
      {48, 1306},
      {49, 1343},
      {50, 1380},
      {51, 1455},
      {52, 1494},
      {53, 1533},
      {54, 1572},
      {55, 1612},
      {56, 1694},
      {57, 1735},
      {58, 1777},
      {59, 1820},
      {60, 1863},
      {61, 1950},
      {62, 1995},
      {63, 2040},
      {64, 2085},
      {65, 2131},
      {66, 2225},
      {67, 2272},
      {68, 2320},
      {69, 2369},
      {70, 2418},
      {71, 2517},
      {72, 2568},
      {73, 2619},
      {74, 2670},
      {75, 2722},
      {76, 2828},
      {77, 2881},
      {78, 2935},
      {79, 2990},
      {80, 3045},
      {81, 3156},
      {82, 3213},
      {83, 3270},
      {84, 3327},
      {85, 3385},
      {86, 3503},
      {87, 3562},
      {88, 3622},
      {89, 3683},
      {90, 3744},
      {91, 3867},
      {92, 3930},
      {93, 3993},
      {94, 4056},
      {95, 4120},
      {96, 4250},
      {97, 4315},
      {98, 4381},
      {99, 4448}
    ]
  end

  def adventurer_close_defense() do
    [
      {1, 5},
      {2, 5},
      {3, 6},
      {4, 6},
      {5, 7},
      {6, 7},
      {7, 8},
      {8, 8},
      {9, 9},
      {10, 9},
      {11, 10},
      {12, 10},
      {13, 11},
      {14, 11},
      {15, 12},
      {16, 12},
      {17, 13},
      {18, 13},
      {19, 14},
      {20, 14},
      {21, 15},
      {22, 15},
      {23, 16},
      {24, 16},
      {25, 17},
      {26, 17},
      {27, 18},
      {28, 18},
      {29, 19},
      {30, 19},
      {31, 20},
      {32, 20},
      {33, 21},
      {34, 21},
      {35, 22},
      {36, 22},
      {37, 23},
      {38, 23},
      {39, 24},
      {40, 24},
      {41, 25},
      {42, 25},
      {43, 26},
      {44, 26},
      {45, 27},
      {46, 27},
      {47, 28},
      {48, 28},
      {49, 29},
      {50, 29},
      {51, 30},
      {52, 30},
      {53, 31},
      {54, 31},
      {55, 32},
      {56, 32},
      {57, 33},
      {58, 33},
      {59, 34},
      {60, 34},
      {61, 35},
      {62, 35},
      {63, 36},
      {64, 36},
      {65, 37},
      {66, 37},
      {67, 38},
      {68, 38},
      {69, 39},
      {70, 39},
      {71, 40},
      {72, 40},
      {73, 41},
      {74, 41},
      {75, 42},
      {76, 42},
      {77, 43},
      {78, 43},
      {79, 44},
      {80, 44},
      {81, 45},
      {82, 45},
      {83, 46},
      {84, 46},
      {85, 47},
      {86, 47},
      {87, 48},
      {88, 48},
      {89, 49},
      {90, 49},
      {91, 50},
      {92, 50},
      {93, 51},
      {94, 51},
      {95, 52},
      {96, 52},
      {97, 53},
      {98, 53},
      {99, 54}
    ]
  end

  def swordman_close_defense() do
    [
      {1, 5},
      {2, 5},
      {3, 6},
      {4, 7},
      {5, 8},
      {6, 9},
      {7, 10},
      {8, 11},
      {9, 12},
      {10, 13},
      {11, 14},
      {12, 14},
      {13, 15},
      {14, 16},
      {15, 17},
      {16, 18},
      {17, 19},
      {18, 20},
      {19, 21},
      {20, 22},
      {21, 23},
      {22, 23},
      {23, 24},
      {24, 25},
      {25, 26},
      {26, 27},
      {27, 28},
      {28, 29},
      {29, 30},
      {30, 31},
      {31, 32},
      {32, 32},
      {33, 33},
      {34, 34},
      {35, 35},
      {36, 36},
      {37, 37},
      {38, 38},
      {39, 39},
      {40, 40},
      {41, 41},
      {42, 41},
      {43, 42},
      {44, 43},
      {45, 44},
      {46, 45},
      {47, 46},
      {48, 47},
      {49, 48},
      {50, 49},
      {51, 50},
      {52, 50},
      {53, 51},
      {54, 52},
      {55, 53},
      {56, 54},
      {57, 55},
      {58, 56},
      {59, 57},
      {60, 58},
      {61, 59},
      {62, 59},
      {63, 60},
      {64, 61},
      {65, 62},
      {66, 63},
      {67, 64},
      {68, 65},
      {69, 66},
      {70, 67},
      {71, 68},
      {72, 68},
      {73, 69},
      {74, 70},
      {75, 71},
      {76, 72},
      {77, 73},
      {78, 74},
      {79, 75},
      {80, 76},
      {81, 77},
      {82, 77},
      {83, 78},
      {84, 79},
      {85, 80},
      {86, 81},
      {87, 82},
      {88, 83},
      {89, 84},
      {90, 85},
      {91, 86},
      {92, 86},
      {93, 87},
      {94, 88},
      {95, 89},
      {96, 90},
      {97, 91},
      {98, 92},
      {99, 93}
    ]
  end

  def archer_close_defense() do
    [
      {1, 5},
      {2, 5},
      {3, 6},
      {4, 6},
      {5, 7},
      {6, 8},
      {7, 8},
      {8, 9},
      {9, 10},
      {10, 10},
      {11, 11},
      {12, 12},
      {13, 12},
      {14, 13},
      {15, 14},
      {16, 14},
      {17, 15},
      {18, 16},
      {19, 16},
      {20, 17},
      {21, 18},
      {22, 18},
      {23, 19},
      {24, 19},
      {25, 20},
      {26, 21},
      {27, 21},
      {28, 22},
      {29, 23},
      {30, 23},
      {31, 24},
      {32, 25},
      {33, 25},
      {34, 26},
      {35, 27},
      {36, 27},
      {37, 28},
      {38, 29},
      {39, 29},
      {40, 30},
      {41, 31},
      {42, 31},
      {43, 32},
      {44, 32},
      {45, 33},
      {46, 34},
      {47, 34},
      {48, 35},
      {49, 36},
      {50, 36},
      {51, 37},
      {52, 38},
      {53, 38},
      {54, 39},
      {55, 40},
      {56, 40},
      {57, 41},
      {58, 42},
      {59, 42},
      {60, 43},
      {61, 44},
      {62, 44},
      {63, 45},
      {64, 45},
      {65, 46},
      {66, 47},
      {67, 47},
      {68, 48},
      {69, 49},
      {70, 49},
      {71, 50},
      {72, 51},
      {73, 51},
      {74, 52},
      {75, 53},
      {76, 53},
      {77, 54},
      {78, 55},
      {79, 55},
      {80, 56},
      {81, 57},
      {82, 57},
      {83, 58},
      {84, 58},
      {85, 59},
      {86, 60},
      {87, 60},
      {88, 61},
      {89, 62},
      {90, 62},
      {91, 63},
      {92, 64},
      {93, 64},
      {94, 65},
      {95, 66},
      {96, 66},
      {97, 67},
      {98, 68},
      {99, 68}
    ]
  end

  def magician_close_defense() do
    [
      {1, 5},
      {2, 5},
      {3, 6},
      {4, 6},
      {5, 7},
      {6, 7},
      {7, 8},
      {8, 8},
      {9, 9},
      {10, 9},
      {11, 10},
      {12, 10},
      {13, 11},
      {14, 11},
      {15, 12},
      {16, 12},
      {17, 13},
      {18, 13},
      {19, 14},
      {20, 14},
      {21, 15},
      {22, 15},
      {23, 16},
      {24, 16},
      {25, 17},
      {26, 17},
      {27, 18},
      {28, 18},
      {29, 19},
      {30, 19},
      {31, 20},
      {32, 20},
      {33, 21},
      {34, 21},
      {35, 22},
      {36, 22},
      {37, 23},
      {38, 23},
      {39, 24},
      {40, 24},
      {41, 25},
      {42, 25},
      {43, 26},
      {44, 26},
      {45, 27},
      {46, 27},
      {47, 28},
      {48, 28},
      {49, 29},
      {50, 29},
      {51, 30},
      {52, 30},
      {53, 31},
      {54, 31},
      {55, 32},
      {56, 32},
      {57, 33},
      {58, 33},
      {59, 34},
      {60, 34},
      {61, 35},
      {62, 35},
      {63, 36},
      {64, 36},
      {65, 37},
      {66, 37},
      {67, 38},
      {68, 38},
      {69, 39},
      {70, 39},
      {71, 40},
      {72, 40},
      {73, 41},
      {74, 41},
      {75, 42},
      {76, 42},
      {77, 43},
      {78, 43},
      {79, 44},
      {80, 44},
      {81, 45},
      {82, 45},
      {83, 46},
      {84, 46},
      {85, 47},
      {86, 47},
      {87, 48},
      {88, 48},
      {89, 49},
      {90, 49},
      {91, 50},
      {92, 50},
      {93, 51},
      {94, 51},
      {95, 52},
      {96, 52},
      {97, 53},
      {98, 53},
      {99, 54}
    ]
  end

  def martial_artist_close_defense() do
    [
      {1, 5},
      {2, 5},
      {3, 6},
      {4, 7},
      {5, 8},
      {6, 8},
      {7, 9},
      {8, 10},
      {9, 11},
      {10, 11},
      {11, 12},
      {12, 13},
      {13, 14},
      {14, 14},
      {15, 15},
      {16, 16},
      {17, 17},
      {18, 17},
      {19, 18},
      {20, 19},
      {21, 20},
      {22, 20},
      {23, 21},
      {24, 22},
      {25, 23},
      {26, 23},
      {27, 24},
      {28, 25},
      {29, 26},
      {30, 26},
      {31, 27},
      {32, 28},
      {33, 29},
      {34, 29},
      {35, 30},
      {36, 31},
      {37, 32},
      {38, 32},
      {39, 33},
      {40, 34},
      {41, 35},
      {42, 35},
      {43, 36},
      {44, 37},
      {45, 38},
      {46, 38},
      {47, 39},
      {48, 40},
      {49, 41},
      {50, 41},
      {51, 42},
      {52, 43},
      {53, 44},
      {54, 44},
      {55, 45},
      {56, 46},
      {57, 47},
      {58, 47},
      {59, 48},
      {60, 49},
      {61, 50},
      {62, 50},
      {63, 51},
      {64, 52},
      {65, 53},
      {66, 53},
      {67, 54},
      {68, 55},
      {69, 56},
      {70, 56},
      {71, 57},
      {72, 58},
      {73, 59},
      {74, 59},
      {75, 60},
      {76, 61},
      {77, 62},
      {78, 62},
      {79, 63},
      {80, 64},
      {81, 65},
      {82, 65},
      {83, 66},
      {84, 67},
      {85, 68},
      {86, 68},
      {87, 69},
      {88, 70},
      {89, 71},
      {90, 71},
      {91, 72},
      {92, 73},
      {93, 74},
      {94, 74},
      {95, 75},
      {96, 76},
      {97, 77},
      {98, 77},
      {99, 78}
    ]
  end
end
